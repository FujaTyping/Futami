const { SapphireClient } = require('@sapphire/framework');
const { GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const express = require('express')
const { DisTube } = require('distube');

const app = express()

require('dotenv').config()
const { prefix } = require('./config.json');

const client = new SapphireClient({
    defaultPrefix: prefix,
    disableMentionPrefix: true,
    intents: [GatewayIntentBits.MessageContent, GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildVoiceStates],
    loadMessageCommandListeners: true
});

const { SpotifyPlugin } = require('@distube/spotify')
const { SoundCloudPlugin } = require('@distube/soundcloud')
const { YtDlpPlugin } = require('@distube/yt-dlp')

client.distube = new DisTube(client, {
    leaveOnStop: false,
    emitNewSongOnly: true,
    emitAddSongWhenCreatingQueue: false,
    emitAddListWhenCreatingQueue: false,
    plugins: [
        new SpotifyPlugin({
            emitEventsAfterFetching: true
        }),
        new SoundCloudPlugin(),
        new YtDlpPlugin()
    ]
})

const main = async () => {
    try {
        client.logger.info('Futami is waking up...');
        await client.login(process.env.token);
        client.logger.info('Futami is wake up!');
        app.get('/', function (req, res) {
            res.send('Hi - From Futami')
        })
        app.listen(6947)
        client.logger.info('Web service is ready!');
    } catch (error) {
        client.logger.fatal(error);
        client.destroy();
        process.exit(1);
    }
};

main();

const { color } = require('./config.json');

client.distube
    .on('playSong', (queue, song) => {
        const Img = new EmbedBuilder()
            .setColor(color)
            .setImage(song.thumbnail)

        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('üíø ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á')
            .setDescription(`‡πÄ‡∏û‡∏•‡∏á : **${song.name}**\n‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢ : \`${song.uploader.name}\`\n‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ : \`${song.formattedDuration}\` ‡∏ô‡∏≤‡∏ó‡∏µ\n‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢ : ${song.user} - <#${queue.voiceChannel.id}>`)
            .setTimestamp()

        const Button = new ButtonBuilder()
            .setLabel('‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ö‡∏ô ' + song.source)
            .setURL(song.url)
            .setStyle(ButtonStyle.Link);

        const Row = new ActionRowBuilder()
            .addComponents(Button);

        queue.textChannel.send({ embeds: [Img, Content], components: [Row] })
    }
    )
    .on('addSong', (queue, song) => {
        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏ß')
            .setDescription(`‡πÄ‡∏û‡∏•‡∏á : **${song.name}**\n‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢ : ${song.user}\n‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \`f.skip\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ`)
            .setTimestamp()

        queue.textChannel.send({ embeds: [Content] })
    }
    )
    .on('error', (channel, e) => {
        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('üõë ‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô')
            .setDescription("```\n" + `${e.toString().slice(0, 1974)}` + "\n```")
            .setTimestamp()

        if (channel) channel.send({ embeds: [Content] })
        else console.error(e)
    })
    .on('empty', channel => channel.send('‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô... ‡πÑ‡∏õ‡∏•‡∏∞ !!'))
    .on('searchNoResult', (message, query) => {
        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('‚ö†Ô∏è ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ??')
            .setDescription("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á : **" + query + "**\n‡πÉ‡∏™‡πà‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡πÄ‡∏û‡∏•‡∏á / ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á / ‡πÄ‡∏û‡∏•‡∏á ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢")
            .setTimestamp()

        message.channel.send({ embeds: [Content] })
    }
    )
    .on('finish', queue => {
        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡∏∞ ‚úÖ')
            .setDescription("‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \`f.stop\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á")
            .setTimestamp()

        queue.textChannel.send({ embeds: [Content] })
    })