const { SapphireClient, ResultError } = require('@sapphire/framework');
const { GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, messageLink } = require('discord.js');
const express = require('express')
const { DisTube } = require('distube');

const app = express()
const path = require('path');

require('dotenv').config()
const { prefix, debug } = require('./config.json');

const client = new SapphireClient({
    defaultPrefix: prefix,
    disableMentionPrefix: true,
    intents: [GatewayIntentBits.MessageContent, GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildVoiceStates],
    loadMessageCommandListeners: true
});

const { SpotifyPlugin } = require('@distube/spotify')
const { SoundCloudPlugin } = require('@distube/soundcloud')
const { YtDlpPlugin } = require('@distube/yt-dlp')

client.distube = new DisTube(client, {
    streamType: 1,
    leaveOnStop: false,
    leaveOnEmpty: true,
    leaveOnFinish: false,
    emitNewSongOnly: true,
    emitAddSongWhenCreatingQueue: false,
    emitAddListWhenCreatingQueue: false,
    plugins: [
        new SpotifyPlugin({
            emitEventsAfterFetching: true
        }),
        new SoundCloudPlugin(),
        new YtDlpPlugin()
    ]
})

const main = async () => {
    try {
        client.logger.info('Connecting to Discord network');
        await client.login(process.env.token);
        client.logger.info(`Connected ${client.user.tag} successfully !`);
        app.use(express.static(path.join(__dirname, '../service')))
        app.get('/', function (req, res) {
            res.sendFile(__dirname + "../service/index.html")
        })
        const port = 6947
        app.listen(port)
        client.logger.info('Web service is online at port : ' + port);
    } catch (error) {
        client.logger.fatal(error);
        client.destroy();
        process.exit(1);
    }
};

main();

const { color } = require('./config.json');

client.distube
    .on('playSong', async (queue, song) => {
        const Img = new EmbedBuilder()
            .setColor(color)
            .setImage(song.thumbnail)

        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('üéÉ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á')
            .setDescription(`‡πÄ‡∏û‡∏•‡∏á : **${song.name}**\n‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢ : \`${song.uploader.name}\`\n‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á : <#${queue.voiceChannel.id}> - \`${song.formattedDuration}\` ‡∏ô‡∏≤‡∏ó‡∏µ`)
            .setFooter({ text: `‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢ : ${song.user.username}`, iconURL: song.user.avatarURL() })
            .setTimestamp()

        const Button = new ButtonBuilder()
            .setLabel('‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ö‡∏ô ' + song.source)
            .setURL(song.url)
            .setStyle(ButtonStyle.Link);

        const Status = new ButtonBuilder()
            .setCustomId('status')
            .setLabel('‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏•‡∏á')
            .setStyle(ButtonStyle.Secondary);

        const Row = new ActionRowBuilder()
            .addComponents(Button, Status);

        const Msg = await queue.textChannel.send({ embeds: [Img, Content], components: [Row] })

        const Collector = Msg.createMessageComponentCollector({
            filter: (buttonInteraction) => buttonInteraction.customId === 'status' && buttonInteraction.user.id === song.user.id,
            time: 60000,
            max: 1
        });

        Collector.on('collect', (buttonInteraction) => {
            const Content = new EmbedBuilder()
                .setColor(color)
                .setTitle('üéÉ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á')
                .setDescription(`‡πÄ‡∏û‡∏•‡∏á : **${song.name}**\n‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢ : \`${song.uploader.name}\`\n‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á : <#${queue.voiceChannel.id}> - \`${song.formattedDuration}\` ‡∏ô‡∏≤‡∏ó‡∏µ\n`)
                .setFooter({ text: `‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢ : ${song.user.username}`, iconURL: song.user.avatarURL() })
                .addFields(
                    { name: 'üíø ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á', value: `- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á : **${queue.volume} %**\n- ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏π‡∏õ : **${queue.repeatMode ? (queue.repeatMode === 2 ? '‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß' : '‡∏•‡∏π‡∏õ‡πÅ‡∏Ñ‡πà‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ') : '‡∏õ‡∏¥‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏õ)'}**`, inline: true },
                    { name: 'üéµ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á', value: `- ‡πÑ‡∏•‡∏Ñ‡πå  : **${song.likes} ‡∏Ñ‡∏ô**\n- ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏ô‡∏î‡∏π : **${song.views} ‡∏Ñ‡∏ô**`, inline: true }
                )
                .setTimestamp()

            const Row = new ActionRowBuilder()
                .addComponents(Button);

            return Msg.edit({ embeds: [Img, Content], components: [Row] })
        });

        Collector.on('end', (collected, reason) => {
            if (reason === 'time') {
                const Row = new ActionRowBuilder()
                    .addComponents(Button);

                return Msg.edit({ embeds: [Img, Content], components: [Row] })
            }
        });
    }
    )
    .on('addSong', (queue, song) => {
        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏ß')
            .setThumbnail(song.thumbnail)
            .setDescription(`‡πÄ‡∏û‡∏•‡∏á : **${song.name}**\n‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \`f.skip\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ **(‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà ${queue.queues.size})**`)
            .setFooter({ text: `‡∏Ç‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢ : ${song.user.username}`, iconURL: song.user.avatarURL() })
            .setTimestamp()

        queue.textChannel.send({ embeds: [Content] })
    }
    )
    .on('error', (channel, e) => {
        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('üõë ‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô')
            .setDescription("```\n" + `${e.toString().slice(0, 1974)}` + "\n```\n‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏ú‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÑ‡∏õ‡∏ö‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏ß‡∏¢ !!")
            .setTimestamp()

        if (channel) {
            channel.send({ embeds: [Content] })
        } else {
            console.error(e)
        }
    })
    .on('empty', channel => channel.send('‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô... ‡πÑ‡∏õ‡∏•‡∏∞ !!'))
    .on('searchNoResult', (message, query) => {
        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('‚ö†Ô∏è ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ??')
            .setDescription("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á : **" + query + "**\n‡πÉ‡∏™‡πà‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡πÄ‡∏û‡∏•‡∏á / ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á / ‡πÄ‡∏û‡∏•‡∏á ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢")
            .setTimestamp()

        message.channel.send({ embeds: [Content] })
    }
    )
    .on('finish', queue => {
        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡∏∞ ü©∏')
            .setDescription("‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á \`f.stop\` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á\n‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ï‡πà‡∏≠‡∏•‡πà‡∏∞ ??")
            .setTimestamp()

        queue.textChannel.send({ embeds: [Content] })
    })


if (debug) {
    client.on("debug", (d) => {
        console.log(d)
    });
}