const { isMessageInstance } = require('@sapphire/discord.js-utilities');
const { Command } = require('@sapphire/framework');
const { EmbedBuilder, Message, PermissionsBitField } = require('discord.js');

const config = require('../../config.json');
const color = config.chat.color

class TimeoutCommand extends Command {
    constructor(context, options) {
        super(context, { ...options });
    }

    registerApplicationCommands(registry) {
        registry.registerChatInputCommand((builder) =>
            builder.setName('timeout').setDescription('‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏ú‡∏¥‡∏î‡∏Å‡∏è‡∏´‡∏£‡∏≠ ??')
                .addUserOption((option) =>
                    option
                        .setName('user')
                        .setDescription('‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏≥ !!')
                        .setRequired(true)
                )
                .addNumberOption((option) =>
                    option
                        .setName('duration')
                        .setDescription('‡∏ô‡∏≤‡∏ô‡πÑ‡∏´‡∏° ??')
                        .setRequired(true)
                )
                .addStringOption((option) =>
                    option
                        .setName('reason')
                        .setDescription('‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡πà‡∏≤‡∏ß ??')
                )
        );
    }

    async chatInputRun(interaction) {
        const User = interaction.options.getUser('user')
        const Rawtime = interaction.options.getNumber('duration')
        const Reason = interaction.options.getString('reason') ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•'
        const Guild = interaction.guild

        const Guilduser = await Guild.members.fetch(User)
        const Time = (Rawtime * 60) * 1000

        const Fetchuser = Guild.members.cache.get(interaction.user.id);

        async function Main() {
            await Guilduser.timeout(Time, Reason)

            const Content = new EmbedBuilder()
                .setColor(color)
                .setTitle(`ü™Ñ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`)
                .setThumbnail(User.avatarURL())
                .setDescription(`${User} ‡πÇ‡∏î‡∏ô Timeout\n‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ : **${Rawtime}** ‡∏ô‡∏≤‡∏ó‡∏µ\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• : \`${Reason}\``)
                .setFooter({ text: `‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏î‡∏¢ : ${interaction.user.username}`, iconURL: interaction.user.avatarURL() })
                .setTimestamp()

            return interaction.reply({ embeds: [Content] });
        }

        if (Fetchuser.permissions.has(PermissionsBitField.Flags.Administrator)) {
            Main()
        } else {
            const Content = new EmbedBuilder()
                .setColor(color)
                .setTitle(`‚ö†Ô∏è ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô !!`)
                .setDescription(`<@${interaction.user.id}> ‡∏Ñ‡∏¥‡∏î‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏ô‡∏∞ ??\n‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡πå Administrator ‡∏Å‡πà‡∏≠‡∏ô !!`)
                .setTimestamp()

            return interaction.reply({ embeds: [Content] });
        }
    }
}
module.exports = {
    TimeoutCommand
};