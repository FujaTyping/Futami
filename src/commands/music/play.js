const { Command, container } = require('@sapphire/framework');
const { EmbedBuilder } = require('discord.js');
const fs = require('fs');

const config = require('../../config.json');
const color = config.chat.color

const PlaylistDataJSON = fs.readFileSync('./src/commands/music/data/playlist.json', 'utf8');
const DataPlaylist = JSON.parse(PlaylistDataJSON);

class PlayCommand extends Command {
    constructor(context, options) {
        super(context, {
            ...options,
            name: 'play',
            aliases: ['p'],
            description: 'play song from source'
        });
    }

    async messageRun(message, args) {
        let Song = await args.rest('string');
        const { client } = container;

        if (!message.member.voice.channel) {
            const Content = new EmbedBuilder()
                .setColor(color)
                .setTitle('‚ö†Ô∏è ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô !!')
                .setDescription('‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
                .setTimestamp()

            return await message.reply({ embeds: [Content] });
        } else {
            if (Song.includes('--playlist')) {
                let PlaylistName = Song.replace('--playlist', '').trim();
                const Playlist = DataPlaylist.Playlist.find(PlaySong => PlaySong.name === PlaylistName);

                if (Playlist) {
                    Song = Playlist.url
                    const msg = await message.reply('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ ...');

                    client.distube.play(message.member.voice.channel, Song, {
                        member: message.member,
                        textChannel: message.channel,
                        message
                    })

                    const Content = new EmbedBuilder()
                        .setColor(color)
                        .setTitle('‚ñ∂Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™')
                        .setDescription(`‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ : **${Playlist.title}**\n‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢ : \`${Playlist.request}\``)
                        .setTimestamp()

                    return await msg.edit({ content: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡πà‡∏∞ ‚ú®', embeds: [Content] });
                } else {
                    let PlaylistName = Song.replace('--playlist', '').trim();
                    const Content = new EmbedBuilder()
                        .setColor(color)
                        .setTitle('‚ö†Ô∏è ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô !!')
                        .setDescription(`‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ **${PlaylistName}** ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ü‡∏π‡∏ï‡∏≤‡∏°‡∏¥‡∏ô‡∏∞`)
                        .setTimestamp()

                    return await message.reply({ embeds: [Content] });
                }
            } else {
                const msg = await message.reply('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á ...');

                client.distube.play(message.member.voice.channel, Song, {
                    member: message.member,
                    textChannel: message.channel,
                    message
                })

                /*
                const Content = new EmbedBuilder()
                    .setColor(color)
                    .setTitle('üì£ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® !!')
                    .setDescription('‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ö‡πà‡∏≠‡∏¢\n`Error : 429 too many request`')
                    .setTimestamp()
                */

                return await msg.edit({ content: '‡πÄ‡∏à‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏•‡πà‡∏∞ ‚ú®'/*, embeds: [Content] */ });
            }
        }
    }
}
module.exports = {
    PlayCommand
};