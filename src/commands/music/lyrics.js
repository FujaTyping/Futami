const { isMessageInstance } = require('@sapphire/discord.js-utilities');
const { Command, err } = require('@sapphire/framework');
const { EmbedBuilder } = require('discord.js');
const axios = require('axios')

const config = require('../../config.json');
const color = config.chat.color
const emote = config.default

class LyricsCommand extends Command {
    constructor(context, options) {
        super(context, { ...options });
    }

    registerApplicationCommands(registry) {
        registry.registerChatInputCommand((builder) =>
            builder.setName('lyrics').setDescription('‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏±‡∏á ??')
                .addStringOption((option) =>
                    option
                        .setName('song')
                        .setDescription('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏°‡∏≤‡πÄ‡∏•‡∏¢ !!')
                        .setRequired(true)
                )
                .addStringOption((option) =>
                    option
                        .setName('artist')
                        .setDescription('‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á‡πÉ‡∏Ñ‡∏£ ??')
                )
        );
    }

    async chatInputRun(interaction) {
        const Song = interaction.options.getString('song')
        const AuthorSong = interaction.options.getString('artist') ?? false;
        let Url;

        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á')
            .setDescription('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á ..')
            .setTimestamp()

        const msg = await interaction.reply({ embeds: [Content], fetchReply: true });

        if (AuthorSong) {
            Url = `/${Song}/${AuthorSong}`
        } else {
            Url = `/${Song}`
        }

        axios.get(`https://lyrist.vercel.app/api${Url}`)
            .then(response => {
                const Response = response.data;

                const Content = new EmbedBuilder()
                    .setColor(color)
                    .setTitle(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á`)
                    .setDescription(`‡πÄ‡∏û‡∏•‡∏á : **${Response.title}**\n‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á : \`${Response.artist}\``)
                    .setThumbnail(Response.image)
                    .addFields(
                        { name: '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á', value: `${Response.lyrics.replaceAll("[", "**[").replaceAll("]", "]**")}` }
                    )
                    .setTimestamp()

                return interaction.editReply({ embeds: [Content] });
            })
            .catch(error => {
                const Content = new EmbedBuilder()
                    .setColor(color)
                    .setTitle(`${emote.error} ‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô`)
                    .setDescription("**‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 1024 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£\n```\n" + error + "\n```")
                    .setTimestamp()

                return interaction.editReply({ embeds: [Content] });
            });
    }
}
module.exports = {
    LyricsCommand
};