const { isMessageInstance } = require('@sapphire/discord.js-utilities');
const { Command, err } = require('@sapphire/framework');
const { EmbedBuilder } = require('discord.js');
const axios = require('axios')

const config = require('../../config.json');
const color = config.chat.color
const emote = config.default

const Choices = [
    { name: '‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢', value: 'simplify', example: '2^2+2(2)' },
    { name: '‡πÅ‡∏ü‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå', value: 'factor', example: 'x^2+2x' },
    { name: '‡∏≠‡∏ô‡∏∏‡∏û‡∏±‡∏ô‡∏ò‡πå', value: 'derive',  example: 'x^2+2x' },
    { name: '‡∏õ‡∏£‡∏¥‡∏û‡∏±‡∏ô‡∏ò‡πå', value: 'integrate',  example: 'x^2+2x' },
    { name: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ï‡πâ‡∏Å‡∏£‡∏≤‡∏ü', value: 'area',  example: '2:4lx^3' },
    { name: '‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™ (‡∏ï‡∏£‡∏µ‡πÇ‡∏Å‡∏ì‡∏°‡∏¥‡∏ï‡∏¥)', value: 'tangent',  example: '2lx^3' },
    { name: 'Cos (‡∏ï‡∏£‡∏µ‡πÇ‡∏Å‡∏ì‡∏°‡∏¥‡∏ï‡∏¥)', value: 'cos',  example: 'pi' },
    { name: 'Sin (‡∏ï‡∏£‡∏µ‡πÇ‡∏Å‡∏ì‡∏°‡∏¥‡∏ï‡∏¥)', value: 'sin',  example: '0' },
    { name: 'Tan (‡∏ï‡∏£‡∏µ‡πÇ‡∏Å‡∏ì‡∏°‡∏¥‡∏ï‡∏¥)', value: 'tan',  example: '0' },
    { name: 'Arc cos', value: 'arccos',  example: '1' },
    { name: 'Arc sin', value: 'arcsin',  example: '0' },
    { name: 'Arc tan', value: 'arctan',  example: '0' },
    { name: '‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå', value: 'abs',  example: '1' },
    { name: '‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡∏¥‡∏ó‡∏∂‡∏°', value: 'log',  example: '3' }
];

class CalculatorCommand extends Command {
    constructor(context, options) {
        super(context, { ...options });
    }

    registerApplicationCommands(registry) {
        registry.registerChatInputCommand((builder) =>
            builder.setName('calculator').setDescription('‡∏õ‡∏ß‡∏î‡∏´‡πâ‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç‡πÑ‡∏´‡∏° ??')
                .addStringOption((option) =>
                    option
                        .setName('operation')
                        .setDescription('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô ??')
                        .addChoices(Choices)
                        .setRequired(true)
                )
                .addStringOption((option) =>
                    option
                        .setName('expression')
                        .setDescription('‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏∑‡∏≠ ??')
                        .setRequired(true)
                )
        );
    }

    async chatInputRun(interaction) {
        const Operation = interaction.options.getString('operation')
        const Expression = interaction.options.getString('expression')

        const Type = Choices.find(choice => choice.value === Operation)?.name;
        const Example = Choices.find(choice => choice.value === Operation)?.example;

        const Content = new EmbedBuilder()
            .setColor(color)
            .setTitle('üì≥ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç')
            .setDescription('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡∏™‡∏±‡∏°‡∏Å‡∏≤‡∏£ ..')
            .setTimestamp()

        const msg = await interaction.reply({ embeds: [Content], fetchReply: true });

        axios.get(`https://newton.vercel.app/api/v2/${Operation}/${Expression}`)
            .then(response => {
                const Response = response.data;

                if (Response.result == 'NaN') {
                  const Content = new EmbedBuilder()
                      .setColor(color)
                      .setTitle(`üì≥ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç`)
                      .setDescription(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£ \`${Expression}\` ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ **${Type}** ‡πÑ‡∏î‡πâ\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ${Type} : ${Example}`)
                      .setTimestamp()

                  return interaction.editReply({ embeds: [Content] });
                } else {
                  const Content = new EmbedBuilder()
                      .setColor(color)
                      .setTitle(`üì≥ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç`)
                      .setDescription(`‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ **${Type}** ‡∏î‡πâ‡∏ß‡∏¢ \`${Expression}\` ‡∏Ñ‡∏∑‡∏≠\n`+"```\n" + Response.result + "\n```"+`\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ${Type} : ${Example}`)
                      .setTimestamp()

                  return interaction.editReply({ embeds: [Content] });
                }
            })
            .catch(error => {
                const Content = new EmbedBuilder()
                    .setColor(color)
                    .setAuthor({ name: '‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô ??', iconURL: 'https://futami.siraphop.me/assets/icon/error.png' })
                    .setDescription("```\n" + error + "\n```")
                    .setTimestamp()

                return interaction.editReply({ embeds: [Content] });
            });
    }
}
module.exports = {
    CalculatorCommand
};
